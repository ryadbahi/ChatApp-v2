import React, { useState } from "react";
import { createRoom      await createRoom(roomData);
      onSuccess?.();
    } catch (err: any) {
      console.error("[CreateRoom] Error:", err);
      setError(err.response?.data?.msg || "Failed to create room");
    } finally {om "../api/rooms";

interface CreateRoomFormProps {
  onSuccess?: () => void;
  onCancel?: () => void;
}

const CreateRoomForm: React.FC<CreateRoomFormProps> = ({
  onSuccess,
  onCancel,
}) => {
  const [name, setName] = useState("");
  const [visibility, setVisibility] = useState<"public" | "private" | "secret">(
    "public"
  );
  const [password, setPassword] = useState("");
  const [showPassword, setShowPassword] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [isLoading, setIsLoading] = useState(false);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError(null);
    setIsLoading(true);

    if (!name.trim()) {
      setError("Room name is required");
      setIsLoading(false);
      return;
    }

    if (name.length < 3 || name.length > 50) {
      setError("Room name must be between 3 and 50 characters");
      setIsLoading(false);
      return;
    }

    if (!/^[a-zA-Z0-9\s-_]+$/.test(name)) {
      setError(
        "Room name can only contain letters, numbers, spaces, hyphens, and underscores"
      );
      setIsLoading(false);
      return;
    }

    // Check if password is required for private/secret rooms
    if (visibility !== "public" && (!password || password.length < 4)) {
      setError("Password is required (minimum 4 characters) for private or secret rooms");
      setIsLoading(false);
      return;
    }

    try {
      // Only include password if room is private or secret
      const roomData = {
        name: name.trim(),
        visibility,
        ...(visibility !== "public" && { password })
      };
      
      await createRoom(roomData);
      onSuccess?.();
    } catch (err: any) {
      console.error("[CreateRoom] Error:", err);
      setError(err.response?.data?.msg || "Failed to create room");
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="w-full max-w-md mx-auto backdrop-blur-lg bg-white/10 p-6 rounded-xl border border-white/20">
      <h2 className="text-2xl font-semibold text-white mb-6">
        Create New Room
      </h2>
      <form onSubmit={handleSubmit} className="space-y-4">
        <div>
          <label
            htmlFor="name"
            className="block text-sm font-medium text-white/90 mb-1"
          >
            Room Name
          </label>
          <input
            type="text"
            id="name"
            value={name}
            onChange={(e) => setName(e.target.value)}
            className="w-full px-4 py-2 rounded-lg bg-black/20 border border-white/10 
                     focus:border-blue-500/50 focus:ring-2 focus:ring-blue-500/30 
                     outline-none text-white placeholder-white/50"
            placeholder="Enter room name"
          />
        </div>

        <div>
          <label
            htmlFor="visibility"
            className="block text-sm font-medium text-white/90 mb-1"
          >
            Visibility
          </label>
          <select
            id="visibility"
            value={visibility}
            onChange={(e) =>
              setVisibility(e.target.value as "public" | "private" | "secret")
            }
            className="w-full px-4 py-2 rounded-lg bg-black/20 border border-white/10 
                     focus:border-blue-500/50 focus:ring-2 focus:ring-blue-500/30 
                     outline-none text-white"
          >
            <option value="public">Public (visible to all)</option>
            <option value="private">
              Private (visible but requires permission)
            </option>
            <option value="secret">Secret (hidden unless shared)</option>
          </select>
        </div>

        {/* Show password field if visibility is private or secret */}
        {visibility !== "public" && (
          <div>
            <label
              htmlFor="password"
              className="block text-sm font-medium text-white/90 mb-1"
            >
              Password
            </label>
            <div className="relative">
              <input
                type={showPassword ? "text" : "password"}
                id="password"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                className="w-full px-4 py-2 rounded-lg bg-black/20 border border-white/10 
                         focus:border-blue-500/50 focus:ring-2 focus:ring-blue-500/30 
                         outline-none text-white placeholder-white/50"
                placeholder="Enter password (min 4 characters)"
                minLength={4}
              />
              <button
                type="button"
                onClick={() => setShowPassword(!showPassword)}
                className="absolute right-3 top-1/2 transform -translate-y-1/2 text-white/70 hover:text-white"
              >
                {showPassword ? "Hide" : "Show"}
              </button>
            </div>
            <p className="text-xs text-white/60 mt-1">
              Password is required for private and secret rooms (minimum 4 characters)
            </p>
          </div>
        )}

        {error && (
          <div className="text-red-400 text-sm bg-red-500/10 p-2 rounded">
            {error}
          </div>
        )}

        <div className="flex gap-3 pt-2">
          <button
            type="button"
            onClick={onCancel}
            disabled={isLoading}
            className="flex-1 px-4 py-2 rounded-lg border border-white/20 text-white/90 
                     hover:bg-white/5 transition-colors disabled:opacity-50"
          >
            Cancel
          </button>
          <button
            type="submit"
            disabled={isLoading}
            className="flex-1 px-4 py-2 rounded-lg bg-blue-500/80 text-white 
                     hover:bg-blue-600/80 transition-colors disabled:opacity-50"
          >
            {isLoading ? "Creating..." : "Create Room"}
          </button>
        </div>
      </form>
    </div>
  );
};

export default CreateRoomForm;
